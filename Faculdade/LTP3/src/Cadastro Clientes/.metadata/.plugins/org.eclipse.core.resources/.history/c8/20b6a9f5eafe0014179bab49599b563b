package Usuario;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;


import utilitarios.Console;
import utilitarios.LtpUtil;
import cadastro.Cadastro;
import dados.Cliente;
import dados.ItemVenda;
import dados.Produto;
import dados.Venda;
import erros.SisVendasException;

/** Classe Usuario.
	*   Classe onde e tratado a interacao do usuario com a aplicacao.
	*	Realiza a tratativa de execoes do mesmo,
	*	Cadastro de Objetos.
	*	Leitura dos mesmos.
	* @author Tharyck Gusmao Metzker
*/


public class Usuario {
	
	
	
	/** Metodo Main trata exececoes pela classe SisVendasException
		*	Valida a existencia dos objetos gravados caso seja falso realiza a chamativa dos metodos :
		*   - 	menu - para interacao de usuario maquina
		*   -  Gravacao - finalidade realizar a gravacao dos objetos ArrayList<Cliente>,ArrayList<Venda> e ArrayList<Produto>.
		*  Caso a validacao seja verdadeira, e realizado a chamada dos metodos de leitura de arquivos.
	*/
	public static void main(String[] args) throws SisVendasException {
		int ultimoValor;
		if (fileExist()) {
			
			lerArq("Venda");
			lerArq("Produto");
			lerArq("Cliente");
			
			try {
				ultimoValor = Cadastro.venda.get(Cadastro.venda.size() - 1)
				.getNumVenda();
				Venda.setSequence(ultimoValor);
				
				} catch (Exception e) {
				System.out.println("Base de dados de vendas nao preenchido !!");
			}
			
			try {
				ultimoValor = Cadastro.produto.get(Cadastro.produto.size() - 1)
				.getCodigo();
				Produto.setSequence(ultimoValor);
				
				} catch (Exception e) {
				System.out
				.println("Base de dados de Produto nao preenchido !!");
			}
			
			try {
				
				ultimoValor = Cadastro.clientes.get(
				Cadastro.clientes.size() - 1).getCodigo();
				Cliente.setSequence(ultimoValor);
				} catch (Exception e) {
				System.out.println("Base de dados de vendas nao preenchido !!");
			}
			
		}
		
		menu();
		gravarArq("Vendas");
		gravarArq("Produto");
		gravarArq("Cliente");
	}
	/** Metodo LerArq Realiza consiste em validar qual metodos executar com base na validacao da variavel passada por referencia.
		*	Executa a leitura dos arquivos objetos gravados do disco e popula os mesmos para cada ArrayList<E> na classe Cadastro.
		*@param String
		*@return Metodo void sem retorno
		*@author Tharyck Gusmao Metzker
	*/
	
	
	private static void lerArq(String obj) {
		ObjectInputStream inp;
		try {
			if (obj.equals("Venda")) {
				inp = new ObjectInputStream(new FileInputStream("Vendas.obj"));
				Cadastro.venda = (ArrayList<Venda>) inp.readObject();
				inp.close();
				} else if (obj.equals("Produto")) {
				inp = new ObjectInputStream(new FileInputStream("Produtos.obj"));
				Cadastro.produto = (ArrayList<Produto>) inp.readObject();
				
				} else {
				inp = new ObjectInputStream(new FileInputStream("Clientes.obj"));
				Cadastro.clientes = (ArrayList<Cliente>) inp.readObject();
				
			}
			inp.close();
			
			} catch (Exception erro) {
			System.out.println(erro.getMessage());
			System.exit(1); // termino por falha na leitura do arquivo
		}
		
	}
	
	
	/** Metodo gravarArq Realiza consiste em validar qual metodos executar com base na validacao da variavel passada por referencia.
		*	Executa a gravacao dos objetos ArrayList<E> nem arquivos no disco.
		*@param String
		*@return Metodo void sem retorno
		*@author Tharyck Gusmao Metzker
	*/
	
	
	private static void gravarArq(String obj) {
		ObjectOutputStream out;
		
		try {
			if (obj.equals("Vendas")) {
				out = new ObjectOutputStream(new FileOutputStream("Vendas.obj"));
				out.writeObject(Cadastro.venda);
				
				} else if (obj.equals("Produto")) {
				out = new ObjectOutputStream(new FileOutputStream(
				"Produtos.obj"));
				out.writeObject(Cadastro.produto);
				
				} else {
				
				out = new ObjectOutputStream(new FileOutputStream(
				"Clientes.obj"));
				out.writeObject(Cadastro.clientes);
				
			}
			out.close();
			} catch (Exception erro) {
			System.out.println(erro.getMessage());
			System.exit(2); // Termino por falha na gravação do arquivo
		}
		
	}
	
	/** Metodo menu consite em apresentar para o usuario opcoes para submenus .
		*@author Tharyck Gusmao Metzker
	*/
	
	private static void menu() throws SisVendasException {
		int option;
		
		do {
			option = Console.readInt(" ----- MENU DE OPÇÕES ----- \n"
			+ " 1 - Menu Cliente " + "\n 2 - Menu Produtos "
			+ "\n 3 - Menu Vendas " + "\n 6 - Sair "
			+ "\n\n -> Qual opção deseja?");
			switch (option) {
				case 1:
				menuCliente();
				break;
				case 2:
				menuProduto();
				break;
				case 3:
				menuVenda();
				break;
				case 6:
				System.out.println("Fim do programa, obrigado por usar!");
				break;
			}
			
			for (int i = 0; i < 5; i++)
			System.out.println("");
			
		} while (option != 6);
		
	}
	
	/** Metodo menuCliente consiste em apresenta para o usuario metodos para tratativa do menu cliente, trata exececao pela classe SisVendasException.
		*		- Opcao 1 realiza a inclusao de Clientes pelo metodo incluirCliente.
		*		- Opcao 2 realiza a alteracao de Clientes pelo metodo alterarCliente.
		*		- Opcao 3 realiza a exclusao de Clientes pelo metodo excluirCliente.
		*		- Opcao 4 realiza a consulta de Cliente por CPF pelo metodo buscarClienteCPF.
		*		- Opcao 5 realiza a consulta de Ordena os objetos Clientes por ordem alfabetica.
		*		- Opcao 6 Volta ao menu principal.
		*@author Tharyck Gusmao Metzker
	*/
	private static void menuCliente() throws SisVendasException {
		int option;
		do {
			option = Console.readInt(" ----- MENU DE OPÇÕES ----- \n"
			+ " 1 - Incluir " + "\n 2 - Alterar " + "\n 3 - Excluir "
			+ "\n 4 - Buscar pelo CPF "
			+ "\n 5 - Consultar clientes em ordem alfabeitca"
			+ "\n 6 - Voltar menu anterior "
			+ "\n\n -> Qual opção deseja?");
			
			switch (option) {
				case 1:
				incluirCliente();
				break;
				case 2:
				alterarCliente();
				break;
				case 3:
				excluirCliente();
				break;
				case 4:
				buscarClienteCPF();
				break;
				case 5:
				pesqClienteNomeOrdem();
				break;
				case 6:
				System.out.println("Voltando menu anterior !");
				break;
			}
			
			for (int i = 0; i < 5; i++)
			System.out.println("");
			
		} while (option != 6);
		
	}
	/** Metodo menuProduto consiste em apresenta para o usuario metodos para tratativa do menu Produto, trata exececao pela classe SisVendasException.
		*		- Opcao 1 realiza a inclusao de Produto pelo metodo incluirProduto.
		*		- Opcao 2 realiza a alterar de Produto pelo metodo aterarProduto.
		*		- Opcao 3 realiza a exclusao de Produto por CPF pelo metodo excluirProduto.
		*		- Opcao 4 realiza a consulta do Produto pelo codigo nos objetos Produto pelo metodo buscarProduto.
		*		- Opcao 5 realiza a consulta em ordem alfabetica dos objetos Produto pelo metodo pesqProdOrdem.
		*		- Opcao 6 Volta ao menu principal.
		*@return Metodo void sem retorno
		*@author Tharyck Gusmao Metzker
	*/
	private static void menuProduto() throws SisVendasException {
		int option;
		do {
			option = Console.readInt(" ----- MENU DE OPÇÕES ----- \n"
			+ " 1 - Incluir " + "\n 2 - Alterar "
			+ "\n 3 - Excluir via codigo "
			+ "\n 4 - Buscar pelo Codigo "
			+ "\n 5 - Buscar por Ordem alfabetica "
			+ "\n 6 - Voltar menu anterior "
			+ "\n\n -> Qual opção deseja?");
			
			switch (option) {
				case 1:
				incluirProduto();
				break;
				case 2:
				aterarProduto();
				;
				break;
				case 3:
				excluirProduto();
				;
				break;
				case 4:
				buscarProduto();
				break;
				case 5:
				pesqProdOrdem();
				break;
				case 6:
				System.out.println("\t --- Voltando menu anterior --- ");
				break;
			}
			
			for (int i = 0; i < 5; i++)
			System.out.println("");
			
		} while (option != 6);
		
	}
	/** Metodo menuVenda consiste em apresenta para o usuario metodos para tratativa do menu Venda, trata exececao pela classe SisVendasException.
		*		- Opcao 1 realiza a inclusao de Venda pelo metodo incluirVenda.
		*		- Opcao 2 realiza a exclusao de Venda pelo metodo excluirVenda.
		*		- Opcao 3 realiza a consulta de Venda em ordem alfabetica  metodo pesqOrdemVendas.
		*		- Opcao 4 realiza a consulta de Venda por periodo pelo metodo vendaClientePerido.
		*		- Opcao 5 pesqProdOrdem.
		*		- Opcao 6 Volta ao menu principal.
		*@return Metodo void sem retorno
		*@author Tharyck Gusmao Metzker
	*/
	private static void menuVenda() throws SisVendasException {
		int option;
		do {
			option = Console.readInt(" ----- MENU DE OPÇÕES ----- \n"
			+ " 1 - Incluir " + "\n 2 - Excluir via codigo "
			+ "\n 3 - Ordem de vendas por Cliente "
			+ "\n 4 - Consultar por Periodo Data "
			
			+ "\n 5 - Estastisca de Venda "
			
			+ "\n 6 - Voltar menu anterior "
			+ "\n\n -> Qual opção deseja?");
			
			switch (option) {
				case 1:
				incluirVenda();
				break;
				case 2:
				excluirVenda();
				;
				break;
				case 3:
				pesqOrdemVendas();
				;
				break;
				case 4:
				vendaClientePerido();
				
				break;
				case 5:
					estastiscaVenda();
					
					break;
				case 6:
				System.out.println(" \t --- Voltando menu anterior  ---");
				break;
			}
			
			for (int i = 0; i < 5; i++)
			System.out.println("");
			
		} while (option != 6);
		
	}
	
	private static void estastiscaVenda() {
		
		String data;
		GregorianCalendar dt1 = new GregorianCalendar();
		GregorianCalendar dt2 = new GregorianCalendar();
		Cliente cli = null;
		int vendas =1;
		double total =0;
		String nome;
		
		
		
		while(true){
			try{
			
			do{
				nome = Console.readLine("NOME: ");
				
				
			}while(!nome.matches("^(\\D*)+(\\s*)+(\\D)$"));
			cli= Cadastro.buscarClienteNome(nome);
			if(cli ==null){
				
				System.out.println("Nao existe nenhum cliente para o nome :");
				continue;
			}
			break;
			
			
		}catch(SisVendasException erro){
			
			System.err.println(erro.getMessage());
		}
		
		}
		
		
		
		
		do {
			
			data = Console
			.readLine("Favor informar a data1 :\n EX: DD/MM/YYYY ");
			
			if (!LtpUtil.validarData(data, dt1)) {
				System.out.println("Data invalida.");
				continue;
			}
			
			if (dt1.after(new GregorianCalendar())) {
				System.out.println(" Data maior que a data atual !!");
			}
			
		} while ((data.matches("^(\\d{2}\\/\\d{2}\\/\\d{4})$"))
		&& (dt1.after(new GregorianCalendar())));
		
		do {
			
			data = Console
			.readLine("Favor informar a data2 :\n EX: DD/MM/YYYY ");
			
			if (!LtpUtil.validarData(data, dt2)) {
				System.out.println("Data invalida.");
				continue;
			}
			
			if (dt2.after(new GregorianCalendar())) {
				System.out.println(" Data maior que a data atual !!");
			}
			
		} while ((data.matches("^(\\d{2}\\/\\d{2}\\/\\d{4})$"))
		&& (dt2.after(new GregorianCalendar())));
		
		ArrayList<Venda> resp = Cadastro.vendaClientePerido(dt1, dt2);
		ArrayList<ItemVenda> resp1 = new ArrayList<ItemVenda>();
		
		
		for(Venda objVEnda :resp){
			
			if(objVEnda.getCliente().getNome().equals(nome));
			{
				resp1 = objVEnda.getVendaItens();
				for(ItemVenda objItem : resp1){
					
					total +=objItem.getValorVenda();
					vendas = vendas++;
					
				}
				
			}
			
			
		}
		
		System.out.println("Estastica cliente : " + nome);
		System.out.println("Numero de produto comprados : " + vendas);
		System.out.println("Valor total de compras: " + total );
		
		
	}
	/**
		* Método responsável pelo cadastro de clientes.
		*	Realiza a inclusao do objeto Cliente pela chamada do metodo Cadastro.incluirCliente
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
		* @throws SisVendasException
	*/
	private static void incluirCliente() throws SisVendasException {
		String cpf;
		String nome;
		String telefone;
		String email;
		
		Cliente inclusaoCliente;
		Cliente objCliente = null;
		System.out.println(" ---- CADASTRO DE CLIENTES ---- ");
		while (true) {
			
			cpf = Console.readLine("CPF: ");
			if (!LtpUtil.validarCPF(cpf)) {
				System.out.println("CPF invalido");
				continue;
			}
			
			try {
				Cliente objCliente1 = Cadastro.buscarClienteCPF(cpf);
				System.out.println("CPF ja esta cadastrado para o Socio : "
				+ objCliente1.getNome());
				} catch (SisVendasException erro) {
				break;
			}
		}
		
		do {
			nome = Console.readLine("NOME: ");
		} while (!nome.matches("^(\\D*)+(\\s*)+(\\D)$"));
		
		telefone = Console.readLine("TELEFONE: ");
		
		do {
			email = Console.readLine("EMAIL: ");
		} while (!LtpUtil.validarEmail(email));
		
		Cadastro.incluirCliente(inclusaoCliente = new Cliente(nome, cpf,
		telefone, email, new GregorianCalendar(),
		new GregorianCalendar()));
		
	}
	
	/**
		* Método responsável pela alterecao de cientes.
		*	Realiza a alteracao dosobjeto Cliente pela chamada do metodo Cadastro.alteracaoCliente
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
	*/
	private static void alterarCliente() {
		
		int codigo;
		String opcao;
		Cliente alteracao;
		
		try {
			codigo = Console
			.readInt("Digite o código do usuário que deseja alterar: ");
			System.out.println(Cadastro.buscarClienteCod(codigo));
			
			alteracao = Cadastro.buscarClienteCod(codigo);
			do {
				opcao = Console
				.readLine("Deseja  realmente alterar o cliente? (S/N): ");
			} while (!(opcao.toUpperCase().charAt(0) == 'S')
			|| ((opcao.toUpperCase().charAt(0) == 'N')));
			
			if (opcao.toUpperCase().charAt(0) == 'S') {
				
				String cpf;
				String nome;
				String telefone;
				String email;
				GregorianCalendar data = new GregorianCalendar();
				
				System.out.println(" ---- ALTERAÇÃO DE CLIENTE ---- ");
				
				do {
					cpf = Console.readLine("CPF: ");
				} while (!LtpUtil.validarCPF(cpf));
				
				do {
					nome = Console.readLine("NOME: ");
				} while (!nome.matches("^(\\D*)+(\\s*)+(\\D)$"));
				
				telefone = Console.readLine("TELEFONE: ");
				
				do {
					email = Console.readLine("EMAIL: ");
				} while (!LtpUtil.validarEmail(email));
				
				alteracao.setCpf(cpf);
				alteracao.setNome(nome);
				alteracao.setTelefone(telefone);
				alteracao.setEmail(email);
				alteracao.setDataUltAlteracao(data); // Passando data da
				// alteração
			}
			
			} catch (SisVendasException e) {
			System.out.println("Não encontrado !!!!!");
		}
	}
	
	/**
		* Método responsável pela exclusão de clientes
		*	Realiza a exclusão do objeto Cliente pela chamada do metodo Cadastro.exclusãoCliente
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
		* @throws SisVendasException
		*             - Quando não é possível encontrar o cliente
	*/
	private static void excluirCliente() throws SisVendasException {
		
		int codigo = Console
		.readInt("Digite o código do cliente que deseja exlcuir: ");
		
		try {
			Cadastro.excluirCliente(Cadastro.buscarClienteCod(codigo));
			System.out.println("Cliente excluído com sucessso!");
			} catch (Exception e) {
			System.out
			.println("\nNão foi possível excuir o cliente, código inválido!");
		}
	}
	
	/**
		* Método responsável pela pesquisa de clientes  em ordem alfabetica
		*	Realiza a pesquisa do objeto Cliente pela chamada do metodo Cadastro.
		*	Realiza a tratativa dos valores das variaveis informado.
		
		
	*/
	
	private static void pesqClienteNomeOrdem() {
		try {
			System.out.println("\nPesquisa de Clientes pelo Nome");
			String nome = Console.readLine("Informe o nome ou parte do nome: ");
			ArrayList<Cliente> resp = Cadastro.buscarClienteNomeOrdem(nome);
			if (resp.isEmpty()) {
				System.out.println("Nao existe nehum cliente para o nome.");
				} else {
				for (Cliente objSocio : resp) {
					System.out.println(objSocio.toString());
					
				}
			}
			
			} catch (SisVendasException erro) {
			System.out.println(erro.getMessage());
		}
	}
	
	/**
		* Método responsável pela busca de clientes pelo CPF
		* @author Tharyck Gusmao Metzker
		
		* @throws SisVendasException
		*             - Quando não é encontrado cliente pelo CPF informado
	*/
	private static void buscarClienteCPF() throws SisVendasException {
		String cpf;
		try {
			
			do {
				
				cpf = Console.readLine("Digite o CPF para buscar: ");
			} while (!LtpUtil.validarCPF(cpf));
			System.out.println(Cadastro.buscarClienteCPF(cpf));
			} catch (SisVendasException e) {
			
			System.out.println("Nao existe cliente para o CPF informado");
		}
	}
	
	/*
		* private static void buscarClienteNome() throws SisVendasException {
		* String nome; try {
		* 
		* do { nome = Console.readLine("NOME: "); } while
		* (!nome.matches("^(\\D*)+(\\s*)+(\\D)$"));
		* 
		* System.out.println(Cadastro.buscarClienteNome(nome)); } catch
		* (SisVendasException e) {
		* 
		* System.out.println("Cliente nao localizado"); } }
	*/
	/**
		* Método responsável pela busca de Produto pelo Codigo
		* @author Tharyck Gusmao Metzker
		* @throws SisVendasException
		*             - Nao existe produto para o CODIGO informado.
	*/
	private static void buscarProduto() throws SisVendasException {
		try {
			int prod = Console.readInt("Digite o codigo para buscar: ");
			System.out.println(Cadastro.buscarProdutoCod(prod));
			} catch (SisVendasException e) {
			System.out.println("Nao existe produto para o CODIGO informado");
		}
	}
		/**
		* Método responsável pelo cadastro de Produto.
		*	Realiza a inclusao do objeto Produto pela chamada do metodo Cadastro.incluirProduto
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
		*/
	private static void incluirProduto() {
		
		String nome;
		double preco;
		
		Produto prod;
		GregorianCalendar data = new GregorianCalendar();
		
		do {
			nome = Console.readLine("Nome do Produto :");
			
		} while (nome.isEmpty());
		
		do {
			
			preco = Console.readDouble("Preco do produto (maior que 0)");
			
		} while (preco <= 0);
		
		Cadastro.incluirProduto(prod = new Produto(nome, preco, data, data));
		
	}
		/**
		* Método responsável pela alterecao de Produto.
		*	Realiza a alteracao dosobjeto Produto pela chamada do metodo Cadastro.alteracaoProduto
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
		* @throws SisVendasException
		*             - Nao existe Produto para o CODIGO informado.
	*/
	private static void aterarProduto() throws SisVendasException {
		
		int cod;
		Produto alteracao;
		try {
			cod = Console.readInt(" Codigo do produto a ser pesquisado :");
			System.out.println(Cadastro.buscarProdutoCod(cod));
			alteracao = Cadastro.buscarProdutoCod(cod);
			String opcao;
			
			do {
				opcao = Console
				.readLine("Deseja  realmente alterar o cliente? (S/N): ");
			} while (!(opcao.toUpperCase().charAt(0) == 'S')
			&& (opcao.toUpperCase().charAt(0) == 'N'));
			
			if (opcao.toUpperCase().charAt(0) == 'S') {
				
				String nome;
				double preco;
				GregorianCalendar data = new GregorianCalendar();
				
				do {
					nome = Console.readLine("Nome do Produto :");
					
				} while (nome.isEmpty());
				
				do {
					
					preco = Console
					.readDouble("Preco do produto (maior que 0)");
					
				} while (preco <= 0);
				
				alteracao.setNome(nome);
				alteracao.setPrecoUnitatio(preco);
				alteracao.setDataUltAlteracao(data);
				
			}
			
			} catch (SisVendasException e) {
			
			System.out.println("Não encontrado !!!!!");
			
		}
		
	}
		/**
		* Método responsável pela exclusão de Produto
		*	Realiza a exclusão do objeto Produto pela chamada do metodo Cadastro.exclusãoProduto
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
		* @throws SisVendasException
		*             - Não foi possível excuir o Produto, código inválido
	*/
	private static void excluirProduto() throws SisVendasException {
		
		int codigo = Console
		.readInt("Digite o código do Produto que deseja exlcuir: ");
		Produto prod;
		try {
			prod = Cadastro.buscarProdutoCod(codigo);
			if (Cadastro.pesqProdtoVenda(prod)) {
				
				System.out
				.println("Ja existe Venda Cadastrado para o produto !!");
				
				} else {
				
				System.out.println(prod);
				
				String entrada = Console
				.readLine("Voce deseja excluir esta venda? / (S/N) ");
				if (entrada.equalsIgnoreCase("S")) {
					
					Cadastro.excluirProduto(prod);
					
				}
				System.out.println("Produto excluído com sucessso!");
				
			}
			
			} catch (Exception e) {
			System.out
			.println("\nNão foi possível excuir o Produto, código inválido!");
		}
	}
	/**
		* Método responsável pela pesquisa de Produto  em ordem alfabetica
		*	Realiza a pesquisa do objeto Produto pela chamada do metodo Cadastro.
		*	Realiza a tratativa dos valores das variaveis informado
		*@author Tharyck Gusmao Metzker
			* @throws SisVendasException
		*             - Não foi possível excuir o Produto, código inválido.
	*/
	private static void pesqProdOrdem() {
		try {
			System.out.println("\nPesquisa de Produto pelo Nome");
			String nome = Console.readLine("Informe o nome ou parte do nome: ");
			ArrayList<Produto> resp = Cadastro.buscarProdutoNome(nome);
			if (resp.isEmpty()) {
				System.out.println("Nao existe nehum cliente para o nome.");
				} else {
				for (Produto objSocio : resp) {
					System.out.println(objSocio.toString());
					
				}
			}
			
			} catch (SisVendasException erro) {
			System.out.println(erro.getMessage());
		}}
		/**
		* Método responsável pelo cadastro de Venda.
		*	Realiza a inclusao do objeto Venda pela chamada do metodo Cadastro.incluirVenda
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
			* @throws SisVendasException
		*             - Não foi possível encontrar CPF informado.
		*/
	private static void incluirVenda() throws SisVendasException {
		GregorianCalendar dt = new GregorianCalendar();
		Cliente cliente = null;
		Produto produto = null;
		String cpf;
		String data;
		Date dt1;
		int quantidade;
		double preco = 0;
		double valor = 0;
		ArrayList<ItemVenda> itensVendas = new ArrayList<ItemVenda>();
		
		try {
			
			do {
				
				cpf = Console.readLine("Digite o CPF para buscar: ");
			} while (!LtpUtil.validarCPF(cpf));
			
			cliente = Cadastro.buscarClienteCPF(cpf);
			
			do {
				
				data = Console
				.readLine("Favor informar a data :\n EX: DD/MM/YYYY ");
				
				if (!LtpUtil.validarData(data, dt)) {
					System.out.println("Data invalida.");
					continue;
				}
				
				if (dt.after(new GregorianCalendar())) {
					System.out.println(" Data maior que a data atual !!");
				}
				
			} while ((data.matches("^(\\d{2}\\/\\d{2}\\/\\d{4})$"))
			&& (dt.after(new GregorianCalendar())));
			
			do {
				
				int codigo = Console
				.readInt("Informe o codigo do produto para o cadastro: ");
				try {
					produto = Cadastro.buscarProdutoCod(codigo);
					if (produto == null) {
						System.out.println("Nao existe produto neste codigo");
					}
					} catch (SisVendasException e) {
					System.out.println(e.getMessage());
				}
				
			} while (produto == null);
			
			do {
				
				quantidade = Console
				.readInt("Informe a quantidade de itens vendidos: ");
				if (quantidade <= 0) {
					System.out
					.println("A quantidade tem que ser maior que zero!");
					} else {
					
					do {
						preco = Console
						.readDouble("Informe o preco do produto vendido: ");
						valor = preco * quantidade;
						if (preco <= 0) {
							System.out
							.println("A quantidade tem que ser maior que zero!");
						}
					} while (preco <= 0);
					
				}
			} while (quantidade <= 0);
			
			itensVendas.add(new ItemVenda(produto, preco, quantidade, preco));
			Cadastro.incluirVenda(new Venda(cliente, dt, itensVendas));
			} catch (SisVendasException e) {
			System.out.println(e.getMessage());
		}
	}
	/**
		* Método responsável pela exclusao de Venda.
		*	Realiza a exclusao do objeto Venda pela chamada do metodo Cadastro.excluirVenda
		*	Realiza a tratativa dos valores das variaveis informado.
		* @author Tharyck Gusmao Metzker
			* @throws SisVendasException
		*             - Não foi possível encontrar o cod do Produto informado.
		*/
	private static void excluirVenda() throws SisVendasException {
		
		int codigo = Console
		.readInt("Digite o código da Venda que deseja exlcuir: ");
		
		try {
			System.out.println(Cadastro.buscarProdutoCod(codigo));
			} catch (SisVendasException erro) {
			System.out.println(erro.getMessage());
		}
		
		String entrada = Console
		.readLine("Voce deseja excluir esta venda? / (S/N) ");
		if (entrada.equalsIgnoreCase("S")) {
			
			Venda obj = Cadastro.buscarVendaCod(codigo);
			if (obj != null) {
				System.out.println(obj);
				Cadastro.excluirVenda(obj);
				System.out.println("A venda foi excluida com sucesso!");
				} else {
				System.out.println("Nao existe venda neste codigo");
			}
		}
		
	}
	/**
		* Método responsável pela pesquisa de Vendas  em ordem
		*	Realiza a pesquisa do objeto Vendas pela chamada do metodo Cadastro.
		*	Realiza a tratativa dos valores das variaveis informado
		*@author Tharyck Gusmao Metzker
	*/
	private static void pesqOrdemVendas() {
		try {
			System.out.println("\nPesquisa de Vendas pelo Nome");
			String nome = Console.readLine("Informe o nome: ");
			Cliente cli = Cadastro.buscarClienteNome(nome);
			ArrayList<Venda> resp = Cadastro.buscarVendaClienteNome(cli);
			if (resp.isEmpty()) {
				System.out.println("Nao existe nehum cliente para o nome.");
				} else {
				for (Venda objSocio : resp) {
					System.out.println(objSocio.toString());
					
				}
			}
			
			} catch (SisVendasException erro) {
			System.out.println(erro.getMessage());
		}
	}
	/**
		* Método responsável pela pesquisa de Vendas por periodo de data
		*	Realiza a pesquisa do objeto Vendas pela chamada do metodo Cadastro.
		*	Realiza a tratativa dos valores das variaveis informado
		*@author Tharyck Gusmao Metzker
	*/
	private static void vendaClientePerido() {
		
		String data;
		GregorianCalendar dt1 = new GregorianCalendar();
		GregorianCalendar dt2 = new GregorianCalendar();
		
		do {
			
			data = Console
			.readLine("Favor informar a data1 :\n EX: DD/MM/YYYY ");
			
			if (!LtpUtil.validarData(data, dt1)) {
				System.out.println("Data invalida.");
				continue;
			}
			
			if (dt1.after(new GregorianCalendar())) {
				System.out.println(" Data maior que a data atual !!");
			}
			
		} while ((data.matches("^(\\d{2}\\/\\d{2}\\/\\d{4})$"))
		&& (dt1.after(new GregorianCalendar())));
		
		do {
			
			data = Console
			.readLine("Favor informar a data2 :\n EX: DD/MM/YYYY ");
			
			if (!LtpUtil.validarData(data, dt2)) {
				System.out.println("Data invalida.");
				continue;
			}
			
			if (dt2.after(new GregorianCalendar())) {
				System.out.println(" Data maior que a data atual !!");
			}
			
		} while ((data.matches("^(\\d{2}\\/\\d{2}\\/\\d{4})$"))
		&& (dt2.after(new GregorianCalendar())));
		
		ArrayList<Venda> resp = Cadastro.vendaClientePerido(dt1, dt2);
		if (resp.isEmpty()) {
			System.out
			.println("Nao existe nehuma venda cadastrada neste periodo.");
			} else {
			for (Venda objProduto : resp) {
				System.out.println(objProduto.toString());
				
			}
		}
		
	}
	/**
		* Método responsável pela validao da existencia os arquivos obj no disco
		*@return true && false
		*@author Tharyck Gusmao Metzker
	*/
	private static boolean fileExist() {
		if (new File("Vendas.obj").exists()
		&& new File("Clientes.obj").exists()
		&& new File("Produtos.obj").exists()) {
			return true;
		}
		
		return false;
		
	}
	
	
	
}